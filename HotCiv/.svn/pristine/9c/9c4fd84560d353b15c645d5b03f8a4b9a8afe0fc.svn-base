package hotciv.view;

import hotciv.framework.Game;
import hotciv.framework.Position;

import java.awt.event.MouseEvent;

import minidraw.framework.Drawing;
import minidraw.framework.DrawingEditor;
import minidraw.framework.Figure;
import minidraw.framework.RubberBandSelectionStrategy;
import minidraw.framework.Tool;
import minidraw.standard.AbstractTool;
import minidraw.standard.NullTool;
import minidraw.standard.SelectionTool;
import minidraw.standard.handlers.DragTracker;
import minidraw.standard.handlers.SelectAreaTracker;

public class MoveUnitTool extends AbstractTool {
	private Game game;
	protected Tool fChild;
	protected Tool cachedNullTool;
	protected Figure draggedFigure;
	RubberBandSelectionStrategy selectionStrategy;
	  
	public MoveUnitTool(Game game, DrawingEditor editor, 
            RubberBandSelectionStrategy selectionStrategy ) {
		super(editor);
		this.game = game;
		fChild = cachedNullTool = new NullTool();
	    draggedFigure = null;
		this.selectionStrategy = selectionStrategy; 
	}
	
	@Override
	public void mouseDown(MouseEvent e, int x, int y)
	{
		super.mouseDown(e, x, y);
		
		Drawing model = editor().drawing();
	    
	    model.lock();

	    draggedFigure = model.findFigure(e.getX(), e.getY());

	    if ( draggedFigure != null && draggedFigure.getClass() == UnitFigure.class) {
	      fChild = createDragTracker( draggedFigure );
	    } else if ( ! e.isShiftDown() ) {
	        model.clearSelection();
	    }
	    fChild.mouseDown(e, x, y);
	}
	
	@Override
	public void mouseDrag(MouseEvent e, int x, int y) {
		fChild.mouseDrag(e, x, y);
	}
	
	@Override
	public void mouseUp(MouseEvent arg0, int arg1, int arg2) {
		if(!game.moveUnit(new Position(super.fAnchorX, super.fAnchorY), new Position(arg1, arg2))) { // need CORRECT positions, they're in mouse coordinates atm
			draggedFigure.moveBy(super.fAnchorX - arg1, super.fAnchorY - arg2); // if invalid move, return to original position
		}
		
		editor().drawing().unlock();
	    fChild = cachedNullTool;
	    draggedFigure = null;
	}
	
	/**
	 * Factory method to create a Drag tracker. It is used to drag a figure.
	 */
	protected Tool createDragTracker(Figure f) {
		return new DragTracker(editor(), f);
	}
}
